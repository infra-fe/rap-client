(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[76],{"9kvl":function(e,t,n){"use strict";var r=n("FfOG");n.d(t,"a",(function(){return r["b"]}));n("bCY9")},afA6:function(e,t,n){"use strict";n.r(t);var r=n("0Owb"),a=n("q1tI"),i=n.n(a),o=n("q3YX"),s=n("qLMh"),p=n("9og8"),c=n("rlch"),d="import { Button } from 'antd'\nimport React, { useState } from 'react'\nimport { http } from '../rapper/http'\nimport 'antd/dist/antd.min.css'\nexport default () => {\n  const [data, setData] = useState({})\n  const [loading, setLoading] = useState(false)\n  async function handleClick() {\n    setLoading(true)\n    try {\n      const res = await http('POST/user/info/header', {\n        token: 'xx',\n        name: 'name_11',\n        age: 10,\n      })\n      setData(res)\n    } finally {\n      setLoading(false)\n    }\n  }\n  return (\n    <div>\n      <Button type=\"primary\" loading={loading} onClick={handleClick}>\n        fetch\n      </Button>\n      <pre>response: {JSON.stringify(data, null, 2)}</pre>\n    </div>\n  )\n}",l="/* md5: 70ea4799a0660d9f70e529f7c4a94a24 */\n/* Rap repository id: 308 */\n/* @infra/generation version: 3.0.1-beta.2 */\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\n\n/**\n * This file is automatically generated by Rapper to synchronize the Rap platform interface, please do not modify\n * Rap repository url: /repository/editor?id=308\n */\n\nimport { IModels } from './models'\n\nexport type Models = IModels\nexport * from './http'\nexport * from './models'",u="/* md5: 6f1f9b4c8e294f40f1caa473021faa3c */\n/* Rap repository id: 308 */\n/* @infra/generation version: 3.0.1-beta.2 */\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\n\n/**\n * This file is automatically generated by Rapper to synchronize the Rap platform interface, please do not modify\n * Rap repository url: /repository/editor?id=308\n */\n\nimport {\n  createHttpRequest,\n  createFallbackFetch,\n  createSeprateInterceptor,\n} from '@rapper3/request'\nimport { IModels } from './models'\nimport { POS_MAP } from './pos'\n\nexport const http = createHttpRequest<IModels>({\n  baseURL:\n    process.env.NODE_ENV === 'production'\n      ? ''\n      : '/api/app/mock/308',\n})\n\nhttp.interceptors.request.use((config) => {\n  const url = [\n    (config.baseURL || '').replace(/\\/$/, ''),\n    '/api/qqq'.replace(/^\\//, ''),\n  ].join('/')\n  config.baseURL = url\n  return config\n})\n\nhttp.interceptors.request.use(createSeprateInterceptor(POS_MAP))\n\nexport const fetch = createFallbackFetch<IModels>(http)\n\nexport default http",m="/* md5: 6bf221f3e9c0012a379389d99b34f32a */\n/* Rap repository id: 308 */\n/* @infra/generation version: 3.0.1-beta.2 */\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\n\n/**\n * This file is automatically generated by Rapper to synchronize the Rap platform interface, please do not modify\n * Rap repository url: /repository/editor?id=308\n */\n\nexport const POS_MAP = {\n  /**\n   * Interface name\uff1a\u793a\u4f8b\u63a5\u53e3\n   * Rap url: /repository/editor?id=308&mod=1904&itf=11880\n   *\n   */\n  'GET/example/1660824554985': {\n    Query: ['foo'],\n  },\n  /**\n   * Interface name\uff1a\u5e26params\u7684post\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12807\n   *\n   */\n  'POST/user/info': {\n    Query: ['name'],\n    Body: ['age'],\n  },\n  /**\n   * Interface name\uff1a\u5e26header\u7684post\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12808\n   *\n   */\n  'POST/user/info/header': {\n    Header: ['token'],\n    Query: ['name'],\n    Body: ['age'],\n  },\n  /**\n   * Interface name\uff1abasic get\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12809\n   *\n   */\n  'GET/user/list': {\n    Query: ['name'],\n  },\n  /**\n   * Interface name\uff1aget with header\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12810\n   *\n   */\n  'GET/user/list/header': {\n    Header: ['token'],\n    Query: ['name'],\n  },\n}",h="/* md5: d77e91ef6cf361c756519e0e7de4407c */\n/* Rap repository id: 308 */\n/* @infra/generation version: 3.0.1-beta.2 */\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\n\n/**\n * This file is automatically generated by Rapper to synchronize the Rap platform interface, please do not modify\n * Rap repository url: /repository/editor?id=308\n */\n\nexport interface IModels {\n  /**\n   * Interface name\uff1a\u793a\u4f8b\u63a5\u53e3\n   * Rap url: /repository/editor?id=308&mod=1904&itf=11880\n   *\n   */\n  'GET/example/1660824554985': {\n    Req: IModels['GET/example/1660824554985']['Header'] &\n      IModels['GET/example/1660824554985']['Query'] &\n      IModels['GET/example/1660824554985']['Body']\n    Header: {}\n    Query: {\n      /**\n       * \u8bf7\u6c42\u5c5e\u6027\u793a\u4f8b\n       */\n      foo?: string\n      /**\n       * scene key\n       */\n      __scene?: string\n    }\n    Body: {}\n    Res: {\n      /**\n       * \u5b57\u7b26\u4e32\u5c5e\u6027\u793a\u4f8b\n       */\n      string?: string\n      /**\n       * \u6570\u5b57\u5c5e\u6027\u793a\u4f8b\n       */\n      number?: number\n      /**\n       * \u5e03\u5c14\u5c5e\u6027\u793a\u4f8b\n       */\n      boolean?: boolean\n      /**\n       * \u6b63\u5219\u5c5e\u6027\u793a\u4f8b\n       */\n      regexp?: string\n      /**\n       * \u51fd\u6570\u5c5e\u6027\u793a\u4f8b\n       */\n      function?: string\n      /**\n       * \u6570\u7ec4\u5c5e\u6027\u793a\u4f8b\n       */\n      array?: {\n        /**\n         * \u6570\u7ec4\u5143\u7d20\u793a\u4f8b\n         */\n        foo?: number\n        /**\n         * \u6570\u7ec4\u5143\u7d20\u793a\u4f8b\n         */\n        bar?: string\n      }[]\n      /**\n       * \u81ea\u5b9a\u4e49\u6570\u7ec4\u5143\u7d20\u793a\u4f8b\n       */\n      items?: unknown[]\n      /**\n       * \u5bf9\u8c61\u5c5e\u6027\u793a\u4f8b\n       */\n      object?: {\n        /**\n         * \u5bf9\u8c61\u5c5e\u6027\u793a\u4f8b\n         */\n        foo?: number\n        /**\n         * \u5bf9\u8c61\u5c5e\u6027\u793a\u4f8b\n         */\n        bar?: string\n      }\n      /**\n       * \u5360\u4f4d\u7b26\u793a\u4f8b\n       */\n      placeholder?: string\n    }\n  }\n\n  /**\n   * Interface name\uff1a\u5e26params\u7684post\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12807\n   *\n   */\n  'POST/user/info': {\n    Req: IModels['POST/user/info']['Header'] &\n      IModels['POST/user/info']['Query'] &\n      IModels['POST/user/info']['Body']\n    Header: {}\n    Query: {\n      name?: string\n      /**\n       * scene key\n       */\n      __scene?: string\n    }\n    Body: {\n      age?: number\n    }\n    Res: {\n      data: {\n        list?: {\n          name?: string\n          age?: number\n        }[]\n        total?: string\n      }\n      code?: string\n      msg?: string\n    }\n  }\n\n  /**\n   * Interface name\uff1a\u5e26header\u7684post\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12808\n   *\n   */\n  'POST/user/info/header': {\n    Req: IModels['POST/user/info/header']['Header'] &\n      IModels['POST/user/info/header']['Query'] &\n      IModels['POST/user/info/header']['Body']\n    Header: {\n      token?: string\n    }\n    Query: {\n      name?: string\n      /**\n       * scene key\n       */\n      __scene?: string\n    }\n    Body: {\n      age?: number\n    }\n    Res: {\n      data?: {\n        name?: string\n        age?: number\n      }\n    }\n  }\n\n  /**\n   * Interface name\uff1abasic get\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12809\n   *\n   */\n  'GET/user/list': {\n    Req: IModels['GET/user/list']['Header'] &\n      IModels['GET/user/list']['Query'] &\n      IModels['GET/user/list']['Body']\n    Header: {}\n    Query: {\n      name?: string\n      /**\n       * scene key\n       */\n      __scene?: string\n    }\n    Body: {}\n    Res: {\n      data?: {\n        list?: {\n          name?: string\n          age?: number\n        }[]\n        total?: number\n      }\n    }\n  }\n\n  /**\n   * Interface name\uff1aget with header\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12810\n   *\n   */\n  'GET/user/list/header': {\n    Req: IModels['GET/user/list/header']['Header'] &\n      IModels['GET/user/list/header']['Query'] &\n      IModels['GET/user/list/header']['Body']\n    Header: {\n      token?: string\n    }\n    Query: {\n      name?: string\n      /**\n       * scene key\n       */\n      __scene?: string\n    }\n    Body: {}\n    Res: {\n      data?: {\n        name?: string\n        age?: number\n      }\n      code?: number\n    }\n  }\n}",f="import { Button } from 'antd'\nimport { useHttp } from '../rapper/react'\nimport 'antd/dist/antd.min.css'\nexport default () => {\n  const { data, loading, runAsync } = useHttp('POST/user/info/header', {\n    token: 'token',\n    name: 'name222',\n    age: 10,\n    __scene: 'test111',\n  })\n  console.log(3333, data)\n  return (\n    <div>\n      <Button loading={loading} onClick={() => runAsync({ name: '333' })}>\n        fetch\n      </Button>\n      <pre>response: {JSON.stringify(data, null, 2)}</pre>\n    </div>\n  )\n}",y="/* md5: 014f2a2492abd0ba18bd1db21d099360 */\n/* Rap repository id: 308 */\n/* @infra/generation version: 3.0.1-beta.2 */\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\n\n/**\n * This file is automatically generated by Rapper to synchronize the Rap platform interface, please do not modify\n * Rap repository url: /repository/editor?id=308\n */\n\nimport { IModels } from './models'\n\nexport type Models = IModels\nexport * from './http'\nexport * from './models'\nexport * from './useHttp'",g="/* md5: 6f1f9b4c8e294f40f1caa473021faa3c */\n/* Rap repository id: 308 */\n/* @infra/generation version: 3.0.1-beta.2 */\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\n\n/**\n * This file is automatically generated by Rapper to synchronize the Rap platform interface, please do not modify\n * Rap repository url: /repository/editor?id=308\n */\n\nimport {\n  createHttpRequest,\n  createFallbackFetch,\n  createSeprateInterceptor,\n} from '@rapper3/request'\nimport { IModels } from './models'\nimport { POS_MAP } from './pos'\n\nexport const http = createHttpRequest<IModels>({\n  baseURL:\n    process.env.NODE_ENV === 'production'\n      ? ''\n      : '/api/app/mock/308',\n})\n\nhttp.interceptors.request.use((config) => {\n  const url = [\n    (config.baseURL || '').replace(/\\/$/, ''),\n    '/api/qqq'.replace(/^\\//, ''),\n  ].join('/')\n  config.baseURL = url\n  return config\n})\n\nhttp.interceptors.request.use(createSeprateInterceptor(POS_MAP))\n\nexport const fetch = createFallbackFetch<IModels>(http)\n\nexport default http",b="/* md5: 6bf221f3e9c0012a379389d99b34f32a */\n/* Rap repository id: 308 */\n/* @infra/generation version: 3.0.1-beta.2 */\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\n\n/**\n * This file is automatically generated by Rapper to synchronize the Rap platform interface, please do not modify\n * Rap repository url: /repository/editor?id=308\n */\n\nexport const POS_MAP = {\n  /**\n   * Interface name\uff1a\u793a\u4f8b\u63a5\u53e3\n   * Rap url: /repository/editor?id=308&mod=1904&itf=11880\n   *\n   */\n  'GET/example/1660824554985': {\n    Query: ['foo'],\n  },\n  /**\n   * Interface name\uff1a\u5e26params\u7684post\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12807\n   *\n   */\n  'POST/user/info': {\n    Query: ['name'],\n    Body: ['age'],\n  },\n  /**\n   * Interface name\uff1a\u5e26header\u7684post\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12808\n   *\n   */\n  'POST/user/info/header': {\n    Header: ['token'],\n    Query: ['name'],\n    Body: ['age'],\n  },\n  /**\n   * Interface name\uff1abasic get\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12809\n   *\n   */\n  'GET/user/list': {\n    Query: ['name'],\n  },\n  /**\n   * Interface name\uff1aget with header\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12810\n   *\n   */\n  'GET/user/list/header': {\n    Header: ['token'],\n    Query: ['name'],\n  },\n}",R="/* md5: d77e91ef6cf361c756519e0e7de4407c */\n/* Rap repository id: 308 */\n/* @infra/generation version: 3.0.1-beta.2 */\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\n\n/**\n * This file is automatically generated by Rapper to synchronize the Rap platform interface, please do not modify\n * Rap repository url: /repository/editor?id=308\n */\n\nexport interface IModels {\n  /**\n   * Interface name\uff1a\u793a\u4f8b\u63a5\u53e3\n   * Rap url: /repository/editor?id=308&mod=1904&itf=11880\n   *\n   */\n  'GET/example/1660824554985': {\n    Req: IModels['GET/example/1660824554985']['Header'] &\n      IModels['GET/example/1660824554985']['Query'] &\n      IModels['GET/example/1660824554985']['Body']\n    Header: {}\n    Query: {\n      /**\n       * \u8bf7\u6c42\u5c5e\u6027\u793a\u4f8b\n       */\n      foo?: string\n      /**\n       * scene key\n       */\n      __scene?: string\n    }\n    Body: {}\n    Res: {\n      /**\n       * \u5b57\u7b26\u4e32\u5c5e\u6027\u793a\u4f8b\n       */\n      string?: string\n      /**\n       * \u6570\u5b57\u5c5e\u6027\u793a\u4f8b\n       */\n      number?: number\n      /**\n       * \u5e03\u5c14\u5c5e\u6027\u793a\u4f8b\n       */\n      boolean?: boolean\n      /**\n       * \u6b63\u5219\u5c5e\u6027\u793a\u4f8b\n       */\n      regexp?: string\n      /**\n       * \u51fd\u6570\u5c5e\u6027\u793a\u4f8b\n       */\n      function?: string\n      /**\n       * \u6570\u7ec4\u5c5e\u6027\u793a\u4f8b\n       */\n      array?: {\n        /**\n         * \u6570\u7ec4\u5143\u7d20\u793a\u4f8b\n         */\n        foo?: number\n        /**\n         * \u6570\u7ec4\u5143\u7d20\u793a\u4f8b\n         */\n        bar?: string\n      }[]\n      /**\n       * \u81ea\u5b9a\u4e49\u6570\u7ec4\u5143\u7d20\u793a\u4f8b\n       */\n      items?: unknown[]\n      /**\n       * \u5bf9\u8c61\u5c5e\u6027\u793a\u4f8b\n       */\n      object?: {\n        /**\n         * \u5bf9\u8c61\u5c5e\u6027\u793a\u4f8b\n         */\n        foo?: number\n        /**\n         * \u5bf9\u8c61\u5c5e\u6027\u793a\u4f8b\n         */\n        bar?: string\n      }\n      /**\n       * \u5360\u4f4d\u7b26\u793a\u4f8b\n       */\n      placeholder?: string\n    }\n  }\n\n  /**\n   * Interface name\uff1a\u5e26params\u7684post\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12807\n   *\n   */\n  'POST/user/info': {\n    Req: IModels['POST/user/info']['Header'] &\n      IModels['POST/user/info']['Query'] &\n      IModels['POST/user/info']['Body']\n    Header: {}\n    Query: {\n      name?: string\n      /**\n       * scene key\n       */\n      __scene?: string\n    }\n    Body: {\n      age?: number\n    }\n    Res: {\n      data: {\n        list?: {\n          name?: string\n          age?: number\n        }[]\n        total?: string\n      }\n      code?: string\n      msg?: string\n    }\n  }\n\n  /**\n   * Interface name\uff1a\u5e26header\u7684post\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12808\n   *\n   */\n  'POST/user/info/header': {\n    Req: IModels['POST/user/info/header']['Header'] &\n      IModels['POST/user/info/header']['Query'] &\n      IModels['POST/user/info/header']['Body']\n    Header: {\n      token?: string\n    }\n    Query: {\n      name?: string\n      /**\n       * scene key\n       */\n      __scene?: string\n    }\n    Body: {\n      age?: number\n    }\n    Res: {\n      data?: {\n        name?: string\n        age?: number\n      }\n    }\n  }\n\n  /**\n   * Interface name\uff1abasic get\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12809\n   *\n   */\n  'GET/user/list': {\n    Req: IModels['GET/user/list']['Header'] &\n      IModels['GET/user/list']['Query'] &\n      IModels['GET/user/list']['Body']\n    Header: {}\n    Query: {\n      name?: string\n      /**\n       * scene key\n       */\n      __scene?: string\n    }\n    Body: {}\n    Res: {\n      data?: {\n        list?: {\n          name?: string\n          age?: number\n        }[]\n        total?: number\n      }\n    }\n  }\n\n  /**\n   * Interface name\uff1aget with header\n   * Rap url: /repository/editor?id=308&mod=1904&itf=12810\n   *\n   */\n  'GET/user/list/header': {\n    Req: IModels['GET/user/list/header']['Header'] &\n      IModels['GET/user/list/header']['Query'] &\n      IModels['GET/user/list/header']['Body']\n    Header: {\n      token?: string\n    }\n    Query: {\n      name?: string\n      /**\n       * scene key\n       */\n      __scene?: string\n    }\n    Body: {}\n    Res: {\n      data?: {\n        name?: string\n        age?: number\n      }\n      code?: number\n    }\n  }\n}",v="/* md5: f803f14084421e692744adaba4a5f0e1 */\n/* Rap repository id: 308 */\n/* @infra/generation version: 3.0.1-beta.2 */\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\n\n/**\n * This file is automatically generated by Rapper to synchronize the Rap platform interface, please do not modify\n * Rap repository url: /repository/editor?id=308\n */\n\nimport { createUseHttp } from '@rapper3/react-ahooks'\nimport { http } from './http'\nimport { IModels } from './models'\n\nexport const useHttp = createUseHttp<IModels>(http)\nexport const useFetch = useHttp",x="import React from 'react'\nimport { Button } from 'antd'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { useRapperQuery } from './utils'\nconst client = new QueryClient()\nfunction App() {\n  const [id, setId] = React.useState(1)\n  const { data, isLoading, isFetching, refetch, ...rest } = useRapperQuery(\n    'GET/user/list/header',\n    { token: 'token xxx' },\n    {\n      onSuccess(data) {\n        console.log('result:', data.data)\n      },\n    }\n  )\n  return (\n    <div>\n      <Button type=\"primary\" onClick={() => refetch()}>\n        refetch\n      </Button>\n      <ul>\n        <li>isLoading: {isLoading.toString()}</li>\n        <li>isFetching: {isFetching.toString()}</li>\n      </ul>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  )\n}\nexport default () => {\n  return (\n    <QueryClientProvider client={client}>\n      <App />\n    </QueryClientProvider>\n  )\n}",k="import { http } from '../../rapper/http'\nimport {\n  createUseRapperMutation,\n  createUseRapperQuery,\n  createUseRapperQueries,\n  createUseRapperInfiniteQuery,\n  createRapperQueryOptions,\n} from '@rapper3/react-query'\n\nexport const useRapperQuery = createUseRapperQuery(http, {\n})\nexport const useRapperQueries = createUseRapperQueries(http, {\n})\nexport const useRapperMutation = createUseRapperMutation(http, {\n})\nexport const useRapperInfiniteQuery = createUseRapperInfiniteQuery(http, {\n})\nexport const op = createRapperQueryOptions(http)",C="/* eslint-disable multiline-comment-style */\nimport React from 'react'\nimport { Button } from 'antd'\nimport { useRapperQueries } from './utils'\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nconst App: React.FC = () => {\n  const [count, setCount] = React.useState(1)\n  const ids = React.useMemo(() => new Array(count).fill(0).map((_, index) => index + 1), [count])\n\n  const results = useRapperQueries({\n    queries: [\n      {\n        url: 'GET/user/list',\n        params: { name: ids[count - 1].toString() },\n      } as const,\n    ],\n  })\n\n  return (\n    <div>\n      <Button type=\"primary\" onClick={() => setCount(x => x + 1)}>\n        click\n      </Button>\n      {results.map((x, index) => (\n        <div key={index}>\n          <ul>\n            <li>isLoading: {x.isLoading.toString()}</li>\n            <li>isFetching: {x.isFetching.toString()}</li>\n          </ul>\n          <pre>{JSON.stringify(x.data, null, 2)}</pre>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nconst client = new QueryClient()\nexport default () => {\n  return (\n    <QueryClientProvider client={client}>\n      <App />\n    </QueryClientProvider>\n  )\n}",O="import React from 'react'\nimport { Button } from 'antd'\nimport { useRapperMutation } from './utils'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nconst App: React.FC = () => {\n  const { mutate, data, isLoading } = useRapperMutation('POST/user/info')\n  return (\n    <div>\n      <Button\n        type=\"primary\"\n        onClick={() =>\n          mutate({\n            name: 'xxxx',\n          })\n        }\n      >\n        click\n      </Button>\n      <ul>\n        <li>isLoading: {isLoading.toString()}</li>\n      </ul>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  )\n}\n\nconst client = new QueryClient()\nexport default () => {\n  return (\n    <QueryClientProvider client={client}>\n      <App />\n    </QueryClientProvider>\n  )\n}",q="import React from 'react'\nimport { Button } from 'antd'\nimport { useRapperInfiniteQuery } from './utils'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nconst App: React.FC = () => {\n  const [id, setId] = React.useState(1)\n  const { data, fetchNextPage, isLoading, isFetching } = useRapperInfiniteQuery(\n    'GET/user/list',\n    {\n      name: id.toString(),\n    },\n    {\n      keepPreviousData: true,\n      getNextPageParam: (_lastPage, _pages) => ({\n        cursor: Math.random().toString().slice(2),\n      }),\n    }\n  )\n  return (\n    <div>\n      <Button onClick={() => setId((x) => x + 1)}>Reset</Button>\n      <Button type=\"primary\" onClick={() => fetchNextPage()}>\n        Load More\n      </Button>\n      <ul>\n        <li>isLoading: {isLoading.toString()}</li>\n        <li>isFetching: {isFetching.toString()}</li>\n      </ul>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  )\n}\n\nconst client = new QueryClient()\nexport default () => {\n  return (\n    <QueryClientProvider client={client}>\n      <App />\n    </QueryClientProvider>\n  )\n}",I="import { Button } from 'antd'\nimport { createSwr, createUseMutate } from '@rapper3/react-swr'\nimport { Models, http } from '../rapper/http'\nimport 'antd/dist/antd.min.css'\n\nconst useSwr = createSwr<Models>(http)\nconst useMutate = createUseMutate<Models>()\nexport default () => {\n  const { data, isValidating, error } = useSwr('POST/user/info', { name: 'swr_name', age: 10 })\n  const mutate = useMutate()\n  return (\n    <>\n      <h3>React SWR</h3>\n      <Button\n        loading={isValidating}\n        disabled={isValidating}\n        type=\"primary\"\n        onClick={() => mutate('POST/user/info')}\n      >\n        Refresh\n      </Button>\n      {data && <pre>{JSON.stringify(data?.data || [], null, 2)}</pre>}\n      {error && `Error...`}\n    </>\n  )\n}",P={"code-http":{component:Object(c["c"])({loader:function(){var e=Object(p["a"])(Object(s["a"])().mark((function e(){return Object(s["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([n.e(2),n.e(4),n.e(74),n.e(6)]).then(n.bind(null,"2pON"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function t(){return e.apply(this,arguments)}return t}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:d},"rapper/http/index.ts":{import:"../rapper/http",content:l},"rapper/http/http.ts":{import:"./http",content:u},"rapper/http/pos.ts":{import:"./pos",content:m},"rapper/http/models.ts":{import:"./models",content:h}},dependencies:{antd:{version:"4.24.4",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"},"@rapper3/request":{version:"0.1.0"}},identifier:"code-http"}},"code-reacthooks":{component:Object(c["c"])({loader:function(){var e=Object(p["a"])(Object(s["a"])().mark((function e(){return Object(s["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([n.e(2),n.e(4),n.e(74),n.e(6)]).then(n.bind(null,"Pv5Y"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function t(){return e.apply(this,arguments)}return t}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:f},"rapper/react/index.ts":{import:"../rapper/react",content:y},"rapper/react/http.ts":{import:"./http",content:g},"rapper/react/pos.ts":{import:"./pos",content:b},"rapper/react/models.ts":{import:"./models",content:R},"rapper/react/useHttp.ts":{import:"./useHttp",content:v}},dependencies:{antd:{version:"4.24.4",css:"antd/dist/antd.css"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"},"@rapper3/request":{version:"^0.0.7"},"@rapper3/react-ahooks":{version:"0.1.0"},axios:{version:"^0.27.2"}},identifier:"code-reacthooks"}},"reactquery-reactquery":{component:Object(c["c"])({loader:function(){var e=Object(p["a"])(Object(s["a"])().mark((function e(){return Object(s["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([n.e(2),n.e(4),n.e(74),n.e(6)]).then(n.bind(null,"QVuS"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function t(){return e.apply(this,arguments)}return t}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:x},"utils.ts":{import:"./utils",content:k},"rapper/http/index.ts":{import:"../rapper/http",content:l},"rapper/http/http.ts":{import:"./http",content:u},"rapper/http/pos.ts":{import:"./pos",content:m},"rapper/http/models.ts":{import:"./models",content:h}},dependencies:{antd:{version:"4.24.4",css:"antd/dist/antd.css"},react:{version:"^16.8.0 || ^17.0.0 || ^18.0.0"},"@tanstack/react-query":{version:"^4"},"react-dom":{version:"^16.8.0 || ^17.0.0 || ^18.0.0"},"react-native":{version:"*"},"@rapper3/react-query":{version:"0.2.0"},"@rapper3/request":{version:"0.1.0"}},identifier:"reactquery-reactquery"}},"reactquery-reactqueries":{component:Object(c["c"])({loader:function(){var e=Object(p["a"])(Object(s["a"])().mark((function e(){return Object(s["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([n.e(2),n.e(4),n.e(74),n.e(6)]).then(n.bind(null,"Q7qO"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function t(){return e.apply(this,arguments)}return t}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:C},"utils.ts":{import:"./utils",content:k},"rapper/http/index.ts":{import:"../rapper/http",content:l},"rapper/http/http.ts":{import:"./http",content:u},"rapper/http/pos.ts":{import:"./pos",content:m},"rapper/http/models.ts":{import:"./models",content:h}},dependencies:{antd:{version:"4.24.4",css:"antd/dist/antd.css"},react:{version:"^16.8.0 || ^17.0.0 || ^18.0.0"},"@tanstack/react-query":{version:"^4"},"react-dom":{version:"^16.8.0 || ^17.0.0 || ^18.0.0"},"react-native":{version:"*"},"@rapper3/react-query":{version:"0.2.0"},"@rapper3/request":{version:"0.1.0"}},identifier:"reactquery-reactqueries"}},"reactquery-usemutation":{component:Object(c["c"])({loader:function(){var e=Object(p["a"])(Object(s["a"])().mark((function e(){return Object(s["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([n.e(2),n.e(4),n.e(74),n.e(6)]).then(n.bind(null,"5La+"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function t(){return e.apply(this,arguments)}return t}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:O},"utils.ts":{import:"./utils",content:k},"rapper/http/index.ts":{import:"../rapper/http",content:l},"rapper/http/http.ts":{import:"./http",content:u},"rapper/http/pos.ts":{import:"./pos",content:m},"rapper/http/models.ts":{import:"./models",content:h}},dependencies:{antd:{version:"4.24.4",css:"antd/dist/antd.css"},react:{version:"^16.8.0 || ^17.0.0 || ^18.0.0"},"@tanstack/react-query":{version:"^4"},"react-dom":{version:"^16.8.0 || ^17.0.0 || ^18.0.0"},"react-native":{version:"*"},"@rapper3/react-query":{version:"0.2.0"},"@rapper3/request":{version:"0.1.0"}},identifier:"reactquery-usemutation"}},"reactquery-useinfinitequery":{component:Object(c["c"])({loader:function(){var e=Object(p["a"])(Object(s["a"])().mark((function e(){return Object(s["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([n.e(2),n.e(4),n.e(74),n.e(6)]).then(n.bind(null,"FK/1"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function t(){return e.apply(this,arguments)}return t}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:q},"utils.ts":{import:"./utils",content:k},"rapper/http/index.ts":{import:"../rapper/http",content:l},"rapper/http/http.ts":{import:"./http",content:u},"rapper/http/pos.ts":{import:"./pos",content:m},"rapper/http/models.ts":{import:"./models",content:h}},dependencies:{antd:{version:"4.24.4",css:"antd/dist/antd.css"},react:{version:"^16.8.0 || ^17.0.0 || ^18.0.0"},"@tanstack/react-query":{version:"^4"},"react-dom":{version:"^16.8.0 || ^17.0.0 || ^18.0.0"},"react-native":{version:"*"},"@rapper3/react-query":{version:"0.2.0"},"@rapper3/request":{version:"0.1.0"}},identifier:"reactquery-useinfinitequery"}},"code-reactswr":{component:Object(c["c"])({loader:function(){var e=Object(p["a"])(Object(s["a"])().mark((function e(){return Object(s["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([n.e(2),n.e(4),n.e(74),n.e(6)]).then(n.bind(null,"qNcW"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function t(){return e.apply(this,arguments)}return t}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:I},"rapper/http/index.ts":{import:"../rapper/http",content:l},"rapper/http/http.ts":{import:"./http",content:u},"rapper/http/pos.ts":{import:"./pos",content:m},"rapper/http/models.ts":{import:"./models",content:h}},dependencies:{antd:{version:"4.24.4",css:"antd/dist/antd.css"},"@rapper3/react-swr":{version:"0.1.0"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"},"@rapper/request":{version:"^0.0.3"},swr:{version:"^1.3.0"},"@rapper3/request":{version:"0.1.0"}},identifier:"code-reactswr"}}},S=n("x2v5"),w=n("KcUY"),M=n.n(w);t["default"]=e=>i.a.createElement(M.a,Object(r["a"])({},e,{config:o,demos:P,apis:S}))},q3YX:function(e){e.exports=JSON.parse('{"menus":{"en-US":{"*":[{"path":"/","title":"Hello RAP!","meta":{}}],"/code":[{"title":"Rapper v3","path":"/code"},{"title":"Pure TS Models","path":"/code/ts"},{"title":"Http Request","path":"/code/http"},{"title":"For React","path":"/code/react","children":[{"title":"React Hooks","path":"/code/react"},{"title":"@rapper3/react-query","path":"/code/react/react-query"},{"title":"@rapper3/react-query3","path":"/code/react/react-query3"},{"title":"@rapper3/react-swr","path":"/code/react/react-swr"},{"title":"@rapper3/react-redux","path":"/code/react/redux"},{"title":"@rapper3/react-redux-toolkit","path":"/code/react/redux-toolkit"}]},{"title":"For Vue","path":"/code/vue","children":[{"title":"@rapper3/vue-query","path":"/code/vue/vue-query"},{"title":"@rapper3/vue-swr","path":"/code/vue/vue-swr"}]},{"title":"Nest DTO","path":"/code/dto"},{"title":"Migration v2 -> v3","path":"/code/migration"}],"/guide":[{"title":"First View","path":"/guide"},{"title":"Getting started","path":"/guide/start"},{"title":"Project","children":[{"title":"Organization","path":"/guide/project/organization"},{"title":"Repository","path":"/guide/project/repository"}]},{"title":"Interface","children":[{"title":"Module","path":"/guide/interface/module"},{"title":"Basic settings","path":"/guide/interface/basic"},{"title":"Validation","path":"/guide/interface/validation"},{"title":"History","path":"/guide/interface/history"},{"title":"Generate Code","path":"/guide/interface/code"}]},{"title":"Mock","children":[{"title":"Basic settings","path":"/guide/mock/basic"},{"title":"Scene setting","path":"/guide/mock/scene"},{"title":"Rules","path":"/guide/mock/rule"}]},{"title":"Import","children":[{"title":"Rap import","path":"/guide/import/rap"},{"title":"Swagger/OpenApi import","path":"/guide/import/swagger"},{"title":"Yapi import","path":"/guide/import/yapi"},{"title":"Protobuf import","path":"/guide/import/protobuf"}]},{"title":"Export","path":"/guide/export"},{"title":"FAQ","path":"/guide/qa"}],"/open":[{"title":"Rap OpenAPI","children":[{"title":"Update interfaces data","path":"/open/upload"},{"title":"Search repository lists","path":"/open/repos"},{"title":"Search organization lists","path":"/open/organizations"},{"title":"Search repository details","path":"/open/detail"},{"title":"Search interface details","path":"/open/interface"},{"title":"Search repository format data","path":"/open/data"}]}],"/":[{"title":"Home","path":"index"}]},"zh-CN":{"*":[{"path":"/zh-CN","title":"Hello RAP!","meta":{}}],"/zh-CN/guide":[{"title":"\u521d\u8bc6RAP","path":"/zh-CN/guide"},{"title":"\u5feb\u901f\u4e0a\u624b","path":"/zh-CN/guide/start"},{"title":"\u9879\u76ee\u7ba1\u7406","children":[{"title":"\u56e2\u961f\u64cd\u4f5c","path":"/zh-CN/guide/project/organization"},{"title":"\u4ed3\u5e93\u64cd\u4f5c","path":"/zh-CN/guide/project/repository"}]},{"title":"\u63a5\u53e3\u7ba1\u7406","children":[{"title":"\u6a21\u5757\u7ba1\u7406","path":"/zh-CN/guide/interface/module"},{"title":"\u57fa\u672c\u8bbe\u7f6e","path":"/zh-CN/guide/interface/basic"},{"title":"\u4fe1\u606f\u6821\u9a8c","path":"/zh-CN/guide/interface/validation"},{"title":"\u67e5\u770b\u5386\u53f2","path":"/zh-CN/guide/interface/history"},{"title":"\u751f\u6210\u4ee3\u7801","path":"/zh-CN/guide/interface/code"}]},{"title":"\u6570\u636eMock","children":[{"title":"\u57fa\u7840\u8bbe\u7f6e","path":"/zh-CN/guide/mock/basic"},{"title":"\u573a\u666f\u8bbe\u7f6e","path":"/zh-CN/guide/mock/scene"},{"title":"\u5339\u914d\u89c4\u5219","path":"/zh-CN/guide/mock/rule"}]},{"title":"\u6570\u636e\u5bfc\u5165","children":[{"title":"Rap\u5bfc\u5165","path":"/zh-CN/guide/import/rap"},{"title":"Swagger/OpenApi\u5bfc\u5165","path":"/zh-CN/guide/import/swagger"},{"title":"Yapi\u5bfc\u5165","path":"/zh-CN/guide/import/yapi"},{"title":"Protobuf\u5bfc\u5165","path":"/zh-CN/guide/import/protobuf"}]},{"title":"\u6570\u636e\u5bfc\u51fa","path":"/zh-CN/guide/export"},{"title":"\u5e38\u89c1\u95ee\u9898\u89e3\u7b54","path":"/zh-CN/guide/qa"}],"/zh-CN/open":[{"title":"Rap\u5f00\u653eAPI","children":[{"title":"\u66f4\u65b0\u4ed3\u5e93\u63a5\u53e3\u4fe1\u606f","path":"/zh-CN/open/upload"},{"title":"\u67e5\u8be2\u4ed3\u5e93\u5217\u8868","path":"/zh-CN/open/repos"},{"title":"\u67e5\u8be2\u56e2\u961f\u5217\u8868","path":"/zh-CN/open/organizations"},{"title":"\u67e5\u8be2\u4ed3\u5e93\u8be6\u7ec6\u4fe1\u606f","path":"/zh-CN/open/detail"},{"title":"\u67e5\u8be2\u63a5\u53e3\u4fe1\u606f","path":"/zh-CN/open/interface"},{"title":"\u67e5\u8be2\u4ed3\u5e93\u6307\u5b9a\u683c\u5f0f\u6570\u636e","path":"/zh-CN/open/data"}]}],"/zh-CN/code":[{"path":"/zh-CN/code","title":"Generate Code Rapper v3","meta":{}},{"path":"/zh-CN/code/dto","title":"Nest DTO Generation","meta":{}},{"path":"/zh-CN/code/http","title":"Http","meta":{}},{"path":"/zh-CN/code/migration","title":"Rapper2.x -> Rapper3.0","meta":{}},{"title":"React","path":"/zh-CN/code/react","meta":{},"children":[{"path":"/zh-CN/code/react","title":"React Hooks","meta":{}},{"path":"/zh-CN/code/react/react-query","title":"@rapper3/react-query","meta":{}},{"path":"/zh-CN/code/react/react-query3","title":"@rapper3/react-query3","meta":{}},{"path":"/zh-CN/code/react/react-swr","title":"@rapper3/react-swr","meta":{}},{"path":"/zh-CN/code/react/redux","title":"@rapper3/react-redux","meta":{}},{"path":"/zh-CN/code/react/redux-toolkit","title":"@rapper3/react-redux-toolkit","meta":{}}]},{"path":"/zh-CN/code/ts","title":"Pure TS Models","meta":{}},{"title":"Vue","path":"/zh-CN/code/vue","meta":{},"children":[{"path":"/zh-CN/code/vue","title":"Vue","meta":{}},{"path":"/zh-CN/code/vue/vue-query","title":"@rapper3/vue-query","meta":{}},{"path":"/zh-CN/code/vue/vue-swr","title":"@rapper3/vue-swr","meta":{}}]}],"/zh-CN":[{"title":"\u9996\u9875","path":"/zh-CNindex"}]}},"locales":[{"name":"en-US","label":"English"},{"name":"zh-CN","label":"\u4e2d\u6587"}],"navs":{"en-US":[{"title":"Guide","path":"/guide"},{"title":"Generate Code","path":"/code"},{"title":"Open API","path":"/open"},{"title":"GitHub","path":"https://github.com/infra-fe/rap-client"},{"title":"Tutorial","path":"https://www.bilibili.com/video/BV1s3411H7fr/"}],"zh-CN":[{"title":"\u6307\u5357","path":"/zh-CN/guide"},{"title":"Open API","path":"/zh-CN/open"},{"title":"GitHub","path":"https://github.com/infra-fe/rap-client"},{"title":"\u89c6\u9891\u6559\u7a0b","path":"https://www.bilibili.com/video/BV1s3411H7fr/"}]},"title":"RAP","logo":"http://rap2.taobao.org/favicon.png","mode":"site","repository":{"url":"https://github.com/infra-fe/rap-client","branch":"master"},"theme":{},"exportStatic":{}}')},x2v5:function(e){e.exports=JSON.parse("{}")}}]);